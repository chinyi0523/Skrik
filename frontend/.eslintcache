[{"/Users/anitalu/Desktop/web_final/CloudComputing_FinalProject/frontend/src/index.js":"1","/Users/anitalu/Desktop/web_final/CloudComputing_FinalProject/frontend/src/App.js":"2","/Users/anitalu/Desktop/web_final/CloudComputing_FinalProject/frontend/src/reportWebVitals.js":"3","/Users/anitalu/Desktop/web_final/CloudComputing_FinalProject/frontend/src/Editor.js":"4","/Users/anitalu/Desktop/web_final/CloudComputing_FinalProject/frontend/src/Login.js":"5","/Users/anitalu/Desktop/web_final/CloudComputing_FinalProject/frontend/src/Menu.js":"6","/Users/anitalu/Desktop/web_final/CloudComputing_FinalProject/frontend/src/structure.js":"7","/Users/anitalu/Desktop/web_final/CloudComputing_FinalProject/frontend/src/components/codeSelect.js":"8","/Users/anitalu/Desktop/web_final/CloudComputing_FinalProject/frontend/src/components/modal.js":"9","/Users/anitalu/Desktop/web_final/CloudComputing_FinalProject/frontend/src/components/socialButton.js":"10","/Users/anitalu/Desktop/web_final/CloudComputing_FinalProject/frontend/src/useStructure.js":"11","/Users/anitalu/Desktop/web_final/CloudComputing_FinalProject/frontend/src/functions/transfer.js":"12","/Users/anitalu/Desktop/web_final/CloudComputing_FinalProject/frontend/src/components/project.js":"13","/Users/anitalu/Desktop/web_final/CloudComputing_FinalProject/frontend/src/ProfileNew.js":"14","/Users/anitalu/Desktop/web_final/CloudComputing_FinalProject/frontend/src/functions/rmduplicate.js":"15"},{"size":502,"mtime":1609064618134,"results":"16","hashOfConfig":"17"},{"size":1393,"mtime":1609597012689,"results":"18","hashOfConfig":"17"},{"size":362,"mtime":1609064618135,"results":"19","hashOfConfig":"17"},{"size":6501,"mtime":1609678043648,"results":"20","hashOfConfig":"17"},{"size":13077,"mtime":1609734757545,"results":"21","hashOfConfig":"17"},{"size":18243,"mtime":1609761038798,"results":"22","hashOfConfig":"17"},{"size":6242,"mtime":1609678043651,"results":"23","hashOfConfig":"17"},{"size":1154,"mtime":1609064618133,"results":"24","hashOfConfig":"17"},{"size":1017,"mtime":1609597012693,"results":"25","hashOfConfig":"17"},{"size":342,"mtime":1609210636260,"results":"26","hashOfConfig":"17"},{"size":8053,"mtime":1609678043654,"results":"27","hashOfConfig":"17"},{"size":2195,"mtime":1609678043650,"results":"28","hashOfConfig":"17"},{"size":1407,"mtime":1609447807614,"results":"29","hashOfConfig":"17"},{"size":2803,"mtime":1609597012692,"results":"30","hashOfConfig":"17"},{"size":703,"mtime":1609678043650,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"mo89la",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"34"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"34"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/anitalu/Desktop/web_final/CloudComputing_FinalProject/frontend/src/index.js",[],["65","66"],"/Users/anitalu/Desktop/web_final/CloudComputing_FinalProject/frontend/src/App.js",[],"/Users/anitalu/Desktop/web_final/CloudComputing_FinalProject/frontend/src/reportWebVitals.js",[],"/Users/anitalu/Desktop/web_final/CloudComputing_FinalProject/frontend/src/Editor.js",[],"/Users/anitalu/Desktop/web_final/CloudComputing_FinalProject/frontend/src/Login.js",["67","68"],"/Users/anitalu/Desktop/web_final/CloudComputing_FinalProject/frontend/src/Menu.js",["69","70","71","72","73","74","75"],"/Users/anitalu/Desktop/web_final/CloudComputing_FinalProject/frontend/src/structure.js",[],"/Users/anitalu/Desktop/web_final/CloudComputing_FinalProject/frontend/src/components/codeSelect.js",["76"],"import React, { useState } from 'react'\nimport Select from 'react-select'\n\n\n\nconst customStyles = {\n    control: (base, state) => ({\n        ...base,\n        width: '30vw',\n        background: \"#023950\",\n        borderRadius: state.isFocused ? \"3px 3px 0 0\" : 3,\n        borderColor: 'transparent',\n        boxShadow: state.isFocused ? null : null,\n        \"&:hover\": {\n            backgroundColor: state.isFocused ? \"#022244\" : \"#023950\",\n        }\n    }),\n    menu: (base, state) => ({\n        ...base,\n        background: \"#023950\",\n        borderRadius: 0,\n        marginTop: 0,\n    \n    }),\n    menuList: (base, state) => ({\n        ...base,\n        padding: 0,\n    }),\n    singleValue: (provided) => ({\n        ...provided,\n        color: '#eeeeee'\n    }),\n    option: (provided, state) => ({\n        ...provided,\n        color: '#eeeeee',\n        \"&:hover\": {\n            backgroundColor: state.isFocused ? \"#022244\" : \"#023950\",\n        }\n        \n    }),\n};\n\nfunction CodeSelect({options, onChange}) {\n    return <div>\n        <Select styles={customStyles} options={options} onChange={onChange} ></Select>\n    </div>\n}\nexport default CodeSelect;","/Users/anitalu/Desktop/web_final/CloudComputing_FinalProject/frontend/src/components/modal.js",[],"/Users/anitalu/Desktop/web_final/CloudComputing_FinalProject/frontend/src/components/socialButton.js",[],"/Users/anitalu/Desktop/web_final/CloudComputing_FinalProject/frontend/src/useStructure.js",["77"],"import { useState } from 'react'\n\n\nconst useStructure = (str) => {\n    const [treeStructure, setTree] = useState(str);\n    const [currentFilePath, setCurrentFilePath] = useState([]);\n    const resetStatus = () => {\n        resetIter(treeStructure)\n        setTree(treeStructure)\n    }\n    const resetIter = (ele) => {\n        if (Array.isArray(ele)) return ele.map(resetIter)\n        else if (ele.type === 'file') {\n            ele.status = 'off';\n        }\n        else if (ele.type === 'blankFile' || ele.type === 'blankFolder') {\n            ele.displayAddBlank = false\n        }\n        else if (ele.type === 'folder') {\n            ele.status = 'close'\n            resetIter(ele.data)\n        }\n    }\n    const modifyClickTree = (fp_arr, isFolder) => {\n        let a = treeStructure\n        let filename='/'\n        for (let i = 0; i < fp_arr.length - 1; i++) {\n            a[fp_arr[i]].status = 'open'\n            filename += (`${a[fp_arr[i]].name}/`)\n            if ((i === fp_arr.length - 2) && !isFolder) a[fp_arr[i]].status = 'innestopen'\n            a = a[fp_arr[i]].data\n        }\n        if (isFolder) {\n            a[fp_arr[fp_arr.length - 1]].status = 'innestopenFocus'\n            filename += (`${a[fp_arr[fp_arr.length - 1]].name}/`)\n        }\n        else {\n            a[fp_arr[fp_arr.length - 1]].status = 'on'\n            filename += (`${a[fp_arr[fp_arr.length - 1]].name}`)\n        }\n        \n        setTree([...treeStructure])\n        return(filename)\n    }\n    const loadStructure = (data) => {\n        console.log(\"Function for reading message from backend\")\n    }\n    const onClickFile = (fp) => {\n        let fp_arr = fp.split('_')\n        setCurrentFilePath(fp_arr)\n        const filename = modifyClickTree(fp_arr, false)\n        return filename\n    }\n    const onClickFolder = (fp) => {\n        let fp_arr = fp.split('_')\n        setCurrentFilePath(fp_arr)\n        modifyClickTree(fp_arr, true)\n    }\n    const IterAddNewFile = (ele, isFolder) => {\n        for (let i = 0; i < ele.length; i++) {\n            if (ele[i].type === 'folder' && ele[i].status === 'open') {\n                let find = IterAddNewFile(ele[i].data, isFolder)\n                if (find === 'find') {\n                    return \"find\"\n                }\n                else return undefined\n            }\n            else if (ele[i].type === 'folder' && (ele[i].status === 'innestopen' || ele[i].status === 'innestopenFocus')) {\n                for (let j = 0; j < ele[i].data.length; j++) {\n                    if (isFolder) {\n                        if (ele[i].data[j].type === 'blankFolder') {\n                            ele[i].data[j].displayAddBlank = true\n                            return \"find\"\n                        }\n                    }\n                    else {\n                        if (ele[i].data[j].type === 'blankFile') {\n                            ele[i].data[j].displayAddBlank = true\n                            return \"find\"\n                        }\n                    }\n                }\n            }\n        }\n    }\n    const IterComfirmNewFile = (ele, name, isFolder) => {\n        for (let i = 0; i < ele.length; i++) {\n            if (ele[i].type === 'folder' && ele[i].status === 'open') {\n                const result = IterComfirmNewFile(ele[i].data, name, isFolder)\n                if (result.find === 'find') {\n                    const currentFilePath = `${ele[i].name}/${result.path}`\n                    console.log(currentFilePath)\n                    return {\"find\":\"find\",\"path\":currentFilePath}\n\n                }\n                else return {\"find\":\"unfind\",\"path\":\"\"}\n            }\n            else if (ele[i].type === 'folder' && (ele[i].status === 'innestopen' || ele[i].status === 'innestopenFocus')) {\n                for (let j = 0; j < ele[i].data.length; j++) {\n                    if (isFolder) {\n                        if (ele[i].data[j].type === 'blankFolder') {\n                            ele[i].data[j].displayAddBlank = false\n                            let cnt = 0\n                            for (let k = 0; k < ele[i].data.length; k++) {\n                                if (ele[i].data[k].type === 'blankFile') {\n                                    cnt = k\n                                }\n                            }\n                            ele[i].data.splice(cnt - 1, 0, {\n                                type: \"folder\",\n                                name: name,\n                                status: \"close\",\n                                data: [\n                                    {\n                                        type: \"blankFolder\",\n                                        displayAddBlank: false,\n                                    },\n                                    {\n                                        type: \"blankFile\",\n                                        displayAddBlank: false,\n                                    },\n                                    \"EOF\"\n                                ]\n                            });\n                            return {\"find\":\"find\",\"path\":`${ele[i].name}/${name}/`}\n                        }\n                    }\n                    else {\n                        if (ele[i].data[j].type === 'blankFile') {\n                            const currentFilePath = `${ele[i].name}/${name}` \n                            return {\"find\":\"find\",\"path\":currentFilePath}\n                        }\n                    }\n                }\n            }\n        }\n        let returnName\n        for(let i=0;i<ele.length;i++){\n            if(isFolder){\n                if (ele[i].type === 'blankFolder') {\n                    returnName = name+'/'\n                    ele[i].displayAddBlank = false;\n                    let cnt = 0\n                    for (let k = 0; k < ele.length; k++) {\n                        if (ele[k].type === 'blankFile') {\n                            cnt = k\n                        }\n                    }\n                    ele.splice(cnt, 0, {\n                        type: \"folder\",\n                        name: name,\n                        status: \"close\",\n                        data: [\n                            {\n                                type: \"blankFolder\",\n                                displayAddBlank: false,\n                            },\n                            {\n                                type: \"blankFile\",\n                                displayAddBlank: false,\n                            },\n                            \"EOF\"\n                        ]\n                    });\n                }\n            }\n            else {\n                if (ele[i].type === 'blankFile') {\n                    ele[i].displayAddBlank = false;\n                    returnName = name;\n                }\n            }\n        }\n        return {\"find\":\"find\",\"path\":returnName}\n    }\n    const AddNewFile = (isFolder) => {\n        let findInsertPlace = IterAddNewFile(treeStructure, isFolder)\n        if (findInsertPlace !== 'find') {\n            for (let i = 0; i < treeStructure.length; i++) {\n                if (isFolder) {\n                    if (treeStructure[i].type === 'blankFolder') {\n                        treeStructure[i].displayAddBlank = true;\n                    }\n                }\n                else {\n                    if (treeStructure[i].type === 'blankFile') {\n                        treeStructure[i].displayAddBlank = true;\n                    }\n                }\n            }\n        }\n        setTree([...treeStructure])\n    }\n    const SaveToTree = (name, isFolder) => {\n        let result = IterComfirmNewFile(treeStructure, name, isFolder).path\n        console.log(result)\n        setTree([...treeStructure])\n        result = `/${result}`\n        return result\n    }\n\n\n\n    // const sendCodes = (codes) => {\n    //     sendData(['input', codes])\n    // }\n\n    return {\n        treeStructure, setTree, resetStatus, onClickFile, onClickFolder, AddNewFile, SaveToTree, currentFilePath\n\n    }\n}\n\nexport default useStructure\n","/Users/anitalu/Desktop/web_final/CloudComputing_FinalProject/frontend/src/functions/transfer.js",[],"/Users/anitalu/Desktop/web_final/CloudComputing_FinalProject/frontend/src/components/project.js",["78","79","80"],"/Users/anitalu/Desktop/web_final/CloudComputing_FinalProject/frontend/src/ProfileNew.js",[],"/Users/anitalu/Desktop/web_final/CloudComputing_FinalProject/frontend/src/functions/rmduplicate.js",[],{"ruleId":"81","replacedBy":"82"},{"ruleId":"83","replacedBy":"84"},{"ruleId":"85","severity":1,"message":"86","line":33,"column":12,"nodeType":"87","messageId":"88","endLine":33,"endColumn":19},{"ruleId":"85","severity":1,"message":"89","line":44,"column":15,"nodeType":"87","messageId":"88","endLine":44,"endColumn":19},{"ruleId":"85","severity":1,"message":"90","line":7,"column":21,"nodeType":"87","messageId":"88","endLine":7,"endColumn":27},{"ruleId":"85","severity":1,"message":"91","line":7,"column":28,"nodeType":"87","messageId":"88","endLine":7,"endColumn":42},{"ruleId":"85","severity":1,"message":"92","line":8,"column":10,"nodeType":"87","messageId":"88","endLine":8,"endColumn":20},{"ruleId":"85","severity":1,"message":"93","line":8,"column":22,"nodeType":"87","messageId":"88","endLine":8,"endColumn":30},{"ruleId":"85","severity":1,"message":"94","line":12,"column":8,"nodeType":"87","messageId":"88","endLine":12,"endColumn":14},{"ruleId":"95","severity":1,"message":"96","line":69,"column":15,"nodeType":"97","endLine":79,"endColumn":6},{"ruleId":"98","severity":1,"message":"99","line":96,"column":50,"nodeType":"97","messageId":"100","endLine":96,"endColumn":52},{"ruleId":"85","severity":1,"message":"101","line":1,"column":17,"nodeType":"87","messageId":"88","endLine":1,"endColumn":25},{"ruleId":"85","severity":1,"message":"102","line":39,"column":11,"nodeType":"87","messageId":"88","endLine":39,"endColumn":24},{"ruleId":"85","severity":1,"message":"101","line":1,"column":16,"nodeType":"87","messageId":"88","endLine":1,"endColumn":24},{"ruleId":"85","severity":1,"message":"103","line":5,"column":10,"nodeType":"87","messageId":"88","endLine":5,"endColumn":16},{"ruleId":"85","severity":1,"message":"104","line":6,"column":8,"nodeType":"87","messageId":"88","endLine":6,"endColumn":12},"no-native-reassign",["105"],"no-negated-in-lhs",["106"],"no-unused-vars","'confirm' is assigned a value but never used.","Identifier","unusedVar","'data' is assigned a value but never used.","'GoLink' is defined but never used.","'GoDeviceMobile' is defined but never used.","'ImFacebook' is defined but never used.","'ImGithub' is defined but never used.","'Select' is defined but never used.","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","expectedAtEnd","'useState' is defined but never used.","'loadStructure' is assigned a value but never used.","'render' is defined but never used.","'swal' is defined but never used.","no-global-assign","no-unsafe-negation"]