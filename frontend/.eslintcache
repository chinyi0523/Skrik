[{"/Users/anitalu/Desktop/web_final/CloudComputing_FinalProject/frontend/src/index.js":"1","/Users/anitalu/Desktop/web_final/CloudComputing_FinalProject/frontend/src/App.js":"2","/Users/anitalu/Desktop/web_final/CloudComputing_FinalProject/frontend/src/reportWebVitals.js":"3","/Users/anitalu/Desktop/web_final/CloudComputing_FinalProject/frontend/src/Editor.js":"4","/Users/anitalu/Desktop/web_final/CloudComputing_FinalProject/frontend/src/Login.js":"5","/Users/anitalu/Desktop/web_final/CloudComputing_FinalProject/frontend/src/Menu.js":"6","/Users/anitalu/Desktop/web_final/CloudComputing_FinalProject/frontend/src/structure.js":"7","/Users/anitalu/Desktop/web_final/CloudComputing_FinalProject/frontend/src/components/codeSelect.js":"8","/Users/anitalu/Desktop/web_final/CloudComputing_FinalProject/frontend/src/components/modal.js":"9","/Users/anitalu/Desktop/web_final/CloudComputing_FinalProject/frontend/src/components/socialButton.js":"10","/Users/anitalu/Desktop/web_final/CloudComputing_FinalProject/frontend/src/useStructure.js":"11","/Users/anitalu/Desktop/web_final/CloudComputing_FinalProject/frontend/src/functions/transfer.js":"12","/Users/anitalu/Desktop/web_final/CloudComputing_FinalProject/frontend/src/components/project.js":"13","/Users/anitalu/Desktop/web_final/CloudComputing_FinalProject/frontend/src/ProfileNew.js":"14","/Users/anitalu/Desktop/web_final/CloudComputing_FinalProject/frontend/src/functions/rmduplicate.js":"15"},{"size":502,"mtime":1609064618134,"results":"16","hashOfConfig":"17"},{"size":1393,"mtime":1609597012689,"results":"18","hashOfConfig":"17"},{"size":362,"mtime":1609064618135,"results":"19","hashOfConfig":"17"},{"size":6501,"mtime":1609678043648,"results":"20","hashOfConfig":"17"},{"size":13077,"mtime":1609678043648,"results":"21","hashOfConfig":"17"},{"size":8213,"mtime":1609678043649,"results":"22","hashOfConfig":"17"},{"size":6242,"mtime":1609678043651,"results":"23","hashOfConfig":"17"},{"size":1154,"mtime":1609064618133,"results":"24","hashOfConfig":"17"},{"size":1017,"mtime":1609597012693,"results":"25","hashOfConfig":"17"},{"size":342,"mtime":1609210636260,"results":"26","hashOfConfig":"17"},{"size":8053,"mtime":1609678043654,"results":"27","hashOfConfig":"17"},{"size":2195,"mtime":1609678043650,"results":"28","hashOfConfig":"17"},{"size":1407,"mtime":1609447807614,"results":"29","hashOfConfig":"17"},{"size":2803,"mtime":1609597012692,"results":"30","hashOfConfig":"17"},{"size":703,"mtime":1609678043650,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"mo89la",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"34"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"34"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"34"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/anitalu/Desktop/web_final/CloudComputing_FinalProject/frontend/src/index.js",[],["66","67"],"/Users/anitalu/Desktop/web_final/CloudComputing_FinalProject/frontend/src/App.js",[],"/Users/anitalu/Desktop/web_final/CloudComputing_FinalProject/frontend/src/reportWebVitals.js",[],"/Users/anitalu/Desktop/web_final/CloudComputing_FinalProject/frontend/src/Editor.js",[],"/Users/anitalu/Desktop/web_final/CloudComputing_FinalProject/frontend/src/Login.js",["68","69"],"/Users/anitalu/Desktop/web_final/CloudComputing_FinalProject/frontend/src/Menu.js",["70","71"],"import React, { useState, useEffect, Component } from 'react';\nimport Modal from './components/modal';\n// import Project from './components/project'\nimport { IconContext } from \"react-icons\";\nimport { FcPlus } from \"react-icons/fc\";\nimport { BsTrash, BsClockHistory, BsFillPeopleFill } from \"react-icons/bs\";\nimport './components/project.css'\nimport Select from 'react-select';\n\nclass Project extends Component {\n    render() {\n        const { id,key, name, hist, colab, intoProject, deleteProject } = this.props;\n        return (\n            <div id={id} key={key} className='project_container' onClick={intoProject}>\n                <div className='project_wrapper' style={{ position: 'relative' }} onClick={this.intoProject}>\n                    <p className='project_title'>{name}</p>\n                    <div className='project_history'>\n                        <IconContext.Provider value={{ color: 'gray', size: '12px', className: 'project_history' }}>\n                            <div>\n                                <BsClockHistory /> <span>changed {hist} days ago</span>\n                            </div>\n                            <div>\n                                <BsFillPeopleFill /> <span>{colab.length-1} collaborators</span>\n                            </div>\n                        </IconContext.Provider>\n                    </div>\n                    <div className='project_btn' onClick={deleteProject}>\n                        <button className='project_trash' >\n                            <IconContext.Provider value={{ color: 'gray', size: '16px', className: 'project_icon' }}>\n                                <BsTrash />\n                            </IconContext.Provider>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\n\n\n\n\n\nconst initList = [\n    {\n        id: 1,\n        name: 'folder1',\n        history: '0',\n        colab: []\n    },\n\n];\n\nconst ls = []\nconst transfer = (ele) => {\n    return ele.map(element => ({\n        'id': element.id_hash,\n        'name': element.project_name,\n        'history':'0',\n        'colab':element.project_users,\n    }));\n}\n\nfunction Menu() {\n    const [list, setList] = useState(transfer(ls));\n\n    useEffect( async () => {\n        const result = await\n        fetch('/api/projects', {\n            method: 'GET',\n            headers: new Headers({\n                'Content-Type': 'application/json'\n            })\n        })\n        const backendList = await result.json()\n        setList([...transfer(backendList)])\n    }, [])\n\n    const modalRef = React.useRef();\n\n    const openModal = () => {\n        modalRef.current.openModal();\n    }\n    const intoProject = (e) => {\n        console.log('into project')\n    }\n    const handleKeyUp = (e) => {\n        if (e.key === 'Enter' && e.target.value !== \"\") {\n            console.log(e.target.value)\n        }\n    }\n    const confirmModal = (e) => {\n        if (e.target.parentNode.parentNode.childNodes[1].childNodes[1].nodeName.toLowerCase() === 'input') {\n            if (e.target.parentNode.parentNode.childNodes[1].childNodes[1].value !== '') {\n                let inputPro = e.target.parentNode.parentNode.childNodes[1].childNodes[1]\n                let newPro = e.target.parentNode.parentNode.childNodes[1].childNodes[1].value;\n                let newColab = (e.target.parentNode.parentNode.childNodes[1].childNodes[3].value).split(';');\n                // console.log(e.target.parentNode.parentNode.childNodes[1].childNodes[3])\n                const same = list.filter(project => { if (project.name === newPro) return true })\n                if (same.length > 0) {\n                    console.log('This project name has already existed!');\n                    inputPro.classList.add('menu_modal_input_warning');\n                    inputPro.parentNode.childNodes[0].childNodes[1].className = 'menu_modal_warning_visible'\n                }\n                else {\n                    console.log(list.length)\n                    console.log(list)\n                    const newProject = {\n                        'project_name': newPro,\n                        'colabs':newColab,\n                    }\n                    fetch('/api/create_project', {\n                        method: 'POST', // or 'PUT'\n                        body: JSON.stringify(newProject),\n                        headers: new Headers({\n                            'Content-Type': 'application/json'\n                        })\n                    }).then(res=>{\n                        console.log(res.status)\n                        if (res.status === 403) {\n                            console.log(\"403\")\n                        }\n                        else if (res.status === 500) {\n                            console.log(\"500\")\n                        }\n                        else if (res.status === 200) {\n                            console.log(\"success\")\n                        }\n                        else {\n                            console.log(\"ERROR\")\n                        }\n                    })\n                    \n                    setList([...list, { id: list.length + 1, name: newPro, history: 0, colab: newColab }])\n                    modalRef.current.closeModal();\n                }\n            }\n            else {\n                console.log('cant create!')\n            }\n        }\n    }\n\n    const deleteProject = (id) => {\n        const newList = list.filter(project => project.id !== id)\n        setList(newList)\n    }\n\n    // const DropdownIndicator = () => null;\n    return (\n        <div id='menu_container' >\n            <div style={{ float: 'left', width: '10%', height: '100%', backgroundColor: 'transparent' }}>\n\n            </div>\n            <div style={{ float: 'left', width: '86%', height: '100%', padding: '30px' }}>\n                <div className='menu_menu' >\n                    {list.map(project => (\n                        <Project\n                            id={project.id}\n                            key={project.id}\n                            name={project.name}\n                            hist={project.history}\n                            colab={project.colab}\n                            intoProject={intoProject}\n                            deleteProject={() => deleteProject(project.id)}\n                        >\n                        </Project>))\n                    }\n                </div>\n            </div>\n            <div style={{ float: 'right', width: '4%', height: '100%', backgroundColor: 'transparent' }}>\n                <button id='menu_add_btn' onClick={openModal}>\n                    <IconContext.Provider value={{ color: 'gray', size: '50px' }}>\n                        <FcPlus />\n                    </IconContext.Provider>\n                </button>\n            </div>\n            <Modal ref={modalRef}>\n                <span className='menu_modal_span'>Create a project</span>\n                <div className='menu_modal_inputs'>\n                    <div>\n                        <p style={{ display: 'inline-block' }}>Project Name</p>\n                        <p className='menu_modal_warning_hidden'>* Project Name error!</p>\n                    </div>\n                    <input className='menu_modal_input' type='text' name='name' id='name' onKeyUp={handleKeyUp} />\n                    Collaborators\n                    {/* <Select\n                        components={{ DropdownIndicator }}\n                        closeMenuOnSelect={false}\n                        options={[]}\n                    >\n                    \n                    </Select> */}\n                    <input className='menu_modal_input' ></input>\n                    <p style={{ color: '#CCCCCC', fontSize: 10, lineHeight: 0.8 }}>* Use \";\" to split collaborators</p>\n                </div>\n                <div className='menu_modal_btns'>\n                    <button className='menu_modal_btn menu_btn_close' onClick={() => modalRef.current.closeModal()}>Close</button>\n                    <button className='menu_modal_btn menu_btn_confirm' onClick={confirmModal}>Confirm</button>\n                </div>\n            </Modal>\n        </div>\n    )\n}\n\n\nexport default Menu;","/Users/anitalu/Desktop/web_final/CloudComputing_FinalProject/frontend/src/structure.js",[],"/Users/anitalu/Desktop/web_final/CloudComputing_FinalProject/frontend/src/components/codeSelect.js",["72"],"import React, { useState } from 'react'\nimport Select from 'react-select'\n\n\n\nconst customStyles = {\n    control: (base, state) => ({\n        ...base,\n        width: '30vw',\n        background: \"#023950\",\n        borderRadius: state.isFocused ? \"3px 3px 0 0\" : 3,\n        borderColor: 'transparent',\n        boxShadow: state.isFocused ? null : null,\n        \"&:hover\": {\n            backgroundColor: state.isFocused ? \"#022244\" : \"#023950\",\n        }\n    }),\n    menu: (base, state) => ({\n        ...base,\n        background: \"#023950\",\n        borderRadius: 0,\n        marginTop: 0,\n    \n    }),\n    menuList: (base, state) => ({\n        ...base,\n        padding: 0,\n    }),\n    singleValue: (provided) => ({\n        ...provided,\n        color: '#eeeeee'\n    }),\n    option: (provided, state) => ({\n        ...provided,\n        color: '#eeeeee',\n        \"&:hover\": {\n            backgroundColor: state.isFocused ? \"#022244\" : \"#023950\",\n        }\n        \n    }),\n};\n\nfunction CodeSelect({options, onChange}) {\n    return <div>\n        <Select styles={customStyles} options={options} onChange={onChange} ></Select>\n    </div>\n}\nexport default CodeSelect;","/Users/anitalu/Desktop/web_final/CloudComputing_FinalProject/frontend/src/components/modal.js",[],"/Users/anitalu/Desktop/web_final/CloudComputing_FinalProject/frontend/src/components/socialButton.js",[],"/Users/anitalu/Desktop/web_final/CloudComputing_FinalProject/frontend/src/useStructure.js",["73"],"import { useState } from 'react'\n\n\nconst useStructure = (str) => {\n    const [treeStructure, setTree] = useState(str);\n    const [currentFilePath, setCurrentFilePath] = useState([]);\n    const resetStatus = () => {\n        resetIter(treeStructure)\n        setTree(treeStructure)\n    }\n    const resetIter = (ele) => {\n        if (Array.isArray(ele)) return ele.map(resetIter)\n        else if (ele.type === 'file') {\n            ele.status = 'off';\n        }\n        else if (ele.type === 'blankFile' || ele.type === 'blankFolder') {\n            ele.displayAddBlank = false\n        }\n        else if (ele.type === 'folder') {\n            ele.status = 'close'\n            resetIter(ele.data)\n        }\n    }\n    const modifyClickTree = (fp_arr, isFolder) => {\n        let a = treeStructure\n        let filename='/'\n        for (let i = 0; i < fp_arr.length - 1; i++) {\n            a[fp_arr[i]].status = 'open'\n            filename += (`${a[fp_arr[i]].name}/`)\n            if ((i === fp_arr.length - 2) && !isFolder) a[fp_arr[i]].status = 'innestopen'\n            a = a[fp_arr[i]].data\n        }\n        if (isFolder) {\n            a[fp_arr[fp_arr.length - 1]].status = 'innestopenFocus'\n            filename += (`${a[fp_arr[fp_arr.length - 1]].name}/`)\n        }\n        else {\n            a[fp_arr[fp_arr.length - 1]].status = 'on'\n            filename += (`${a[fp_arr[fp_arr.length - 1]].name}`)\n        }\n        \n        setTree([...treeStructure])\n        return(filename)\n    }\n    const loadStructure = (data) => {\n        console.log(\"Function for reading message from backend\")\n    }\n    const onClickFile = (fp) => {\n        let fp_arr = fp.split('_')\n        setCurrentFilePath(fp_arr)\n        const filename = modifyClickTree(fp_arr, false)\n        return filename\n    }\n    const onClickFolder = (fp) => {\n        let fp_arr = fp.split('_')\n        setCurrentFilePath(fp_arr)\n        modifyClickTree(fp_arr, true)\n    }\n    const IterAddNewFile = (ele, isFolder) => {\n        for (let i = 0; i < ele.length; i++) {\n            if (ele[i].type === 'folder' && ele[i].status === 'open') {\n                let find = IterAddNewFile(ele[i].data, isFolder)\n                if (find === 'find') {\n                    return \"find\"\n                }\n                else return undefined\n            }\n            else if (ele[i].type === 'folder' && (ele[i].status === 'innestopen' || ele[i].status === 'innestopenFocus')) {\n                for (let j = 0; j < ele[i].data.length; j++) {\n                    if (isFolder) {\n                        if (ele[i].data[j].type === 'blankFolder') {\n                            ele[i].data[j].displayAddBlank = true\n                            return \"find\"\n                        }\n                    }\n                    else {\n                        if (ele[i].data[j].type === 'blankFile') {\n                            ele[i].data[j].displayAddBlank = true\n                            return \"find\"\n                        }\n                    }\n                }\n            }\n        }\n    }\n    const IterComfirmNewFile = (ele, name, isFolder) => {\n        for (let i = 0; i < ele.length; i++) {\n            if (ele[i].type === 'folder' && ele[i].status === 'open') {\n                const result = IterComfirmNewFile(ele[i].data, name, isFolder)\n                if (result.find === 'find') {\n                    const currentFilePath = `${ele[i].name}/${result.path}`\n                    console.log(currentFilePath)\n                    return {\"find\":\"find\",\"path\":currentFilePath}\n\n                }\n                else return {\"find\":\"unfind\",\"path\":\"\"}\n            }\n            else if (ele[i].type === 'folder' && (ele[i].status === 'innestopen' || ele[i].status === 'innestopenFocus')) {\n                for (let j = 0; j < ele[i].data.length; j++) {\n                    if (isFolder) {\n                        if (ele[i].data[j].type === 'blankFolder') {\n                            ele[i].data[j].displayAddBlank = false\n                            let cnt = 0\n                            for (let k = 0; k < ele[i].data.length; k++) {\n                                if (ele[i].data[k].type === 'blankFile') {\n                                    cnt = k\n                                }\n                            }\n                            ele[i].data.splice(cnt - 1, 0, {\n                                type: \"folder\",\n                                name: name,\n                                status: \"close\",\n                                data: [\n                                    {\n                                        type: \"blankFolder\",\n                                        displayAddBlank: false,\n                                    },\n                                    {\n                                        type: \"blankFile\",\n                                        displayAddBlank: false,\n                                    },\n                                    \"EOF\"\n                                ]\n                            });\n                            return {\"find\":\"find\",\"path\":`${ele[i].name}/${name}/`}\n                        }\n                    }\n                    else {\n                        if (ele[i].data[j].type === 'blankFile') {\n                            const currentFilePath = `${ele[i].name}/${name}` \n                            return {\"find\":\"find\",\"path\":currentFilePath}\n                        }\n                    }\n                }\n            }\n        }\n        let returnName\n        for(let i=0;i<ele.length;i++){\n            if(isFolder){\n                if (ele[i].type === 'blankFolder') {\n                    returnName = name+'/'\n                    ele[i].displayAddBlank = false;\n                    let cnt = 0\n                    for (let k = 0; k < ele.length; k++) {\n                        if (ele[k].type === 'blankFile') {\n                            cnt = k\n                        }\n                    }\n                    ele.splice(cnt, 0, {\n                        type: \"folder\",\n                        name: name,\n                        status: \"close\",\n                        data: [\n                            {\n                                type: \"blankFolder\",\n                                displayAddBlank: false,\n                            },\n                            {\n                                type: \"blankFile\",\n                                displayAddBlank: false,\n                            },\n                            \"EOF\"\n                        ]\n                    });\n                }\n            }\n            else {\n                if (ele[i].type === 'blankFile') {\n                    ele[i].displayAddBlank = false;\n                    returnName = name;\n                }\n            }\n        }\n        return {\"find\":\"find\",\"path\":returnName}\n    }\n    const AddNewFile = (isFolder) => {\n        let findInsertPlace = IterAddNewFile(treeStructure, isFolder)\n        if (findInsertPlace !== 'find') {\n            for (let i = 0; i < treeStructure.length; i++) {\n                if (isFolder) {\n                    if (treeStructure[i].type === 'blankFolder') {\n                        treeStructure[i].displayAddBlank = true;\n                    }\n                }\n                else {\n                    if (treeStructure[i].type === 'blankFile') {\n                        treeStructure[i].displayAddBlank = true;\n                    }\n                }\n            }\n        }\n        setTree([...treeStructure])\n    }\n    const SaveToTree = (name, isFolder) => {\n        let result = IterComfirmNewFile(treeStructure, name, isFolder).path\n        console.log(result)\n        setTree([...treeStructure])\n        result = `/${result}`\n        return result\n    }\n\n\n\n    // const sendCodes = (codes) => {\n    //     sendData(['input', codes])\n    // }\n\n    return {\n        treeStructure, setTree, resetStatus, onClickFile, onClickFolder, AddNewFile, SaveToTree, currentFilePath\n\n    }\n}\n\nexport default useStructure\n","/Users/anitalu/Desktop/web_final/CloudComputing_FinalProject/frontend/src/functions/transfer.js",[],"/Users/anitalu/Desktop/web_final/CloudComputing_FinalProject/frontend/src/components/project.js",["74","75","76"],"/Users/anitalu/Desktop/web_final/CloudComputing_FinalProject/frontend/src/ProfileNew.js",[],"/Users/anitalu/Desktop/web_final/CloudComputing_FinalProject/frontend/src/functions/rmduplicate.js",[],{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","replacedBy":"80"},{"ruleId":"81","severity":1,"message":"82","line":33,"column":12,"nodeType":"83","messageId":"84","endLine":33,"endColumn":19},{"ruleId":"81","severity":1,"message":"85","line":44,"column":15,"nodeType":"83","messageId":"84","endLine":44,"endColumn":19},{"ruleId":"81","severity":1,"message":"86","line":8,"column":8,"nodeType":"83","messageId":"84","endLine":8,"endColumn":14},{"ruleId":"87","severity":1,"message":"88","line":79,"column":50,"nodeType":"89","messageId":"90","endLine":79,"endColumn":52},{"ruleId":"81","severity":1,"message":"91","line":1,"column":17,"nodeType":"83","messageId":"84","endLine":1,"endColumn":25},{"ruleId":"81","severity":1,"message":"92","line":39,"column":11,"nodeType":"83","messageId":"84","endLine":39,"endColumn":24},{"ruleId":"81","severity":1,"message":"91","line":1,"column":16,"nodeType":"83","messageId":"84","endLine":1,"endColumn":24},{"ruleId":"81","severity":1,"message":"93","line":5,"column":10,"nodeType":"83","messageId":"84","endLine":5,"endColumn":16},{"ruleId":"81","severity":1,"message":"94","line":6,"column":8,"nodeType":"83","messageId":"84","endLine":6,"endColumn":12},"no-native-reassign",["95"],"no-negated-in-lhs",["96"],"no-unused-vars","'confirm' is assigned a value but never used.","Identifier","unusedVar","'data' is assigned a value but never used.","'Select' is defined but never used.","array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'useState' is defined but never used.","'loadStructure' is assigned a value but never used.","'render' is defined but never used.","'swal' is defined but never used.","no-global-assign","no-unsafe-negation"]