[{"/Users/chinyi0523/Desktop/CloudComputing_FinalProject/frontend/src/index.js":"1","/Users/chinyi0523/Desktop/CloudComputing_FinalProject/frontend/src/reportWebVitals.js":"2","/Users/chinyi0523/Desktop/CloudComputing_FinalProject/frontend/src/App.js":"3","/Users/chinyi0523/Desktop/CloudComputing_FinalProject/frontend/src/Editor.js":"4","/Users/chinyi0523/Desktop/CloudComputing_FinalProject/frontend/src/Menu.js":"5","/Users/chinyi0523/Desktop/CloudComputing_FinalProject/frontend/src/Login.js":"6","/Users/chinyi0523/Desktop/CloudComputing_FinalProject/frontend/src/components/codeSelect.js":"7","/Users/chinyi0523/Desktop/CloudComputing_FinalProject/frontend/src/structure.js":"8","/Users/chinyi0523/Desktop/CloudComputing_FinalProject/frontend/src/components/modal.js":"9","/Users/chinyi0523/Desktop/CloudComputing_FinalProject/frontend/src/components/socialButton.js":"10","/Users/chinyi0523/Desktop/CloudComputing_FinalProject/frontend/src/useStructure.js":"11","/Users/chinyi0523/Desktop/CloudComputing_FinalProject/frontend/src/functions/transfer.js":"12","/Users/chinyi0523/Desktop/CloudComputing_FinalProject/frontend/src/ProfileNew.js":"13","/Users/chinyi0523/Desktop/CloudComputing_FinalProject/frontend/src/functions/rmduplicate.js":"14"},{"size":502,"mtime":1609171017439,"results":"15","hashOfConfig":"16"},{"size":362,"mtime":1609064002444,"results":"17","hashOfConfig":"16"},{"size":1393,"mtime":1609526119621,"results":"18","hashOfConfig":"16"},{"size":6501,"mtime":1609672278274,"results":"19","hashOfConfig":"16"},{"size":8213,"mtime":1609677887172,"results":"20","hashOfConfig":"16"},{"size":13077,"mtime":1609677889649,"results":"21","hashOfConfig":"16"},{"size":1154,"mtime":1609064002442,"results":"22","hashOfConfig":"16"},{"size":6242,"mtime":1609666332926,"results":"23","hashOfConfig":"16"},{"size":1017,"mtime":1609526412468,"results":"24","hashOfConfig":"16"},{"size":342,"mtime":1609210189050,"results":"25","hashOfConfig":"16"},{"size":8053,"mtime":1609666332927,"results":"26","hashOfConfig":"16"},{"size":2195,"mtime":1609666332924,"results":"27","hashOfConfig":"16"},{"size":2803,"mtime":1609526119625,"results":"28","hashOfConfig":"16"},{"size":703,"mtime":1609666332922,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"1o6u66q",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"32"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"32"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"32"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"/Users/chinyi0523/Desktop/CloudComputing_FinalProject/frontend/src/index.js",[],["62","63"],"/Users/chinyi0523/Desktop/CloudComputing_FinalProject/frontend/src/reportWebVitals.js",[],"/Users/chinyi0523/Desktop/CloudComputing_FinalProject/frontend/src/App.js",[],"/Users/chinyi0523/Desktop/CloudComputing_FinalProject/frontend/src/Editor.js",["64"],"import React, { useState } from 'react'\nimport 'codemirror/lib/codemirror.css'\nimport 'codemirror/theme/material-darker.css'\nimport 'codemirror/mode/xml/xml'\nimport 'codemirror/mode/python/python'\nimport 'codemirror/mode/javascript/javascript'\nimport 'codemirror/mode/css/css'\nimport 'codemirror/mode/verilog/verilog'\nimport 'codemirror/mode/clike/clike'\nimport sliceLines from 'slice-lines'\nimport { diffLines } from 'diff'\nimport { Controlled as ControlledEditor } from 'react-codemirror2'\nimport { DiJavascript1, DiCss3Full, DiHtml5, DiReact, DiPython } from \"react-icons/di\";\nimport { SiCplusplus, SiJson } from \"react-icons/si\";\nimport { AiOutlineFile, AiFillRest} from \"react-icons/ai\";\nimport CodeSelect from './components/codeSelect'\nimport transfer from './functions/transfer'\nimport rmduplicate from './functions/rmduplicate'\nimport FileStructure from './structure'\nimport useStructure from './useStructure'\n\n\nconst FILE_ICONS = {\n    js: <DiJavascript1 />,\n    css: <DiCss3Full />,\n    html: <DiHtml5 />,\n    jsx: <DiReact />,\n    py: <DiPython />,\n    cpp: <SiCplusplus />,\n    json: <SiJson />\n};\n\nconst client = new WebSocket('ws://localhost:4000')\n\nconst codingOptions = [\n    { label: 'Python', value: 'python' },\n    { label: 'HTML', value: 'xml' },\n    { label: 'Javascript', value: 'javascript' },\n    { label: 'C++', value: 'text/x-c++src' },\n    { label: 'Verilog', value: 'verilog' },\n    { label: 'CSS', value: 'css' },\n]\n\nexport default function Editor(props) {\n    const ls=['/src/components/SkrikPage.js','/src/components/SkrikPage.css','/src/index.js','/src/index.html','/src/text.py','/package.js','/empty/empty2/']\n    const {treeStructure, setTree, resetStatus, onClickFile, onClickFolder, AddNewFile, SaveToTree, currentFilePath } = useStructure(transfer(rmduplicate(ls).list));\n    const [filesStructure, setFile] = useState(ls);\n    const [language, setLan] = useState('python');\n    const [fileName, setFileName] = useState('Untitled')\n    \n    function onChangeCode(value) {\n        setLan(value.value);\n    }\n    function onChange(value) {\n        sendCodes(value);\n    }\n\n    const [codes, setCodes] = useState('')\n    const [opened, setOpened] = useState(false)\n\n    client.onmessage = (message) => {\n        const { data } = message\n        const [task, update] = JSON.parse(data)\n        if (task === 'output') {\n            let tmp = codes;\n            const content = update.content\n            content.forEach((part) => {\n                if (part.ope === 0) {\n                    if (part.start === 0) tmp = part.content + sliceLines(tmp, part.start)\n                    else tmp = sliceLines(tmp, 0, part.start) + '\\n' + part.content + sliceLines(tmp, part.start)\n                }\n                else {\n                    if (part.start === 0) tmp = sliceLines(tmp, part.end)\n                    else tmp = sliceLines(tmp, 0, part.start) + '\\n' + sliceLines(tmp, part.end)\n                }\n            })\n            setCodes(tmp)\n        }\n        else if(task === 'output-path'){\n            console.log(filesStructure,update)\n            const rmdup = rmduplicate([...filesStructure,update])\n            if(rmdup.duplicate){\n                console.log(\"EXISTS\")\n            }\n            setFile([...rmdup.list])\n            setTree(transfer([...rmdup.list]))\n        }\n    }\n\n    client.onopen = () => {\n        console.log('onopen')\n        setOpened(true)\n    }\n\n    const sendData = (data) => {\n        client.send(JSON.stringify(data))\n    }\n\n    const sendCodes = (code) => {\n        let diff = diffLines(codes, code)\n        let diff_code = []\n        let count_line = 0\n        diff.forEach((part) => {\n            if (part.added) {\n                diff_code.push({ ope: 0, start: count_line, end: count_line + part.count, content: part.value })\n                count_line += part.count\n            }\n            else if (part.removed) {\n                diff_code.push({ ope: 1, start: count_line, end: count_line + part.count, content: part.value })\n            }\n            else {\n                count_line += part.count\n            }\n        })\n        sendData(['input', { author: 'a', content: diff_code }])\n    }\n\n    const sendNewFile = (ls) => {\n        sendData(['path', ls])\n    }\n    const requestFileContext = (ls) => {\n        sendData(['file', ls])\n        const filenamesplit = ls.split('/')\n        setFileName(filenamesplit[filenamesplit.length-1])\n    }\n    const deb = (ls) => {\n        rmduplicate(ls)\n        console.log(transfer(rmduplicate(ls).list))\n    }\n    const ext = fileName.split(\".\")[1];\n    return (\n        <div>\n            <span onClick={()=>deb(ls)}>debugger</span>\n            <div className='page_container'>\n                <div id='folder_structure'>\n                    <FileStructure returnNewFile={sendNewFile} returnClickFile={requestFileContext} treeStructure={treeStructure}\n                    setTree={setTree} resetStatus={resetStatus} onClickFile={onClickFile} onClickFolder={onClickFolder} \n                    AddNewFile={AddNewFile} SaveToTree={SaveToTree} currentFilePath= {currentFilePath}/>\n                </div>\n                <div id='editor_container'>\n                    <div id='editor_title'>\n                        <div>\n                            {FILE_ICONS[ext] || <AiOutlineFile />}\n                            <span style={{marginLeft:\"10px\"}}>{fileName}</span>\n                        </div>\n                        <CodeSelect options={codingOptions} onChange={onChangeCode} />\n                    </div>\n\n                    <ControlledEditor\n                        onBeforeChange={(editor, data, value) => { onChange(value); }}\n                        value={opened ? codes : 'Loading...'}\n                        className=\"code_mirror_wrapper\"\n                        options={{\n                            lineWrapping: true,\n                            lint: true,\n                            mode: language,\n                            theme: 'material-darker',\n                            lineNumbers: true,\n                            cursorHeight: 0.85,\n                            indentUnit: 0,\n                            smartIndent:false,\n                            electricChars:false\n                        }}\n                        placeholder='Select a code mode...'\n                        defaultValue={{ label: \"Select a code mode...\", value: 0 }}\n                    />\n                </div>\n            </div>\n        </div>\n    )\n}\n\n","/Users/chinyi0523/Desktop/CloudComputing_FinalProject/frontend/src/Menu.js",["65","66","67","68"],"/Users/chinyi0523/Desktop/CloudComputing_FinalProject/frontend/src/Login.js",["69","70"],"/Users/chinyi0523/Desktop/CloudComputing_FinalProject/frontend/src/components/codeSelect.js",["71"],"import React, { useState } from 'react'\nimport Select from 'react-select'\n\n\n\nconst customStyles = {\n    control: (base, state) => ({\n        ...base,\n        width: '30vw',\n        background: \"#023950\",\n        borderRadius: state.isFocused ? \"3px 3px 0 0\" : 3,\n        borderColor: 'transparent',\n        boxShadow: state.isFocused ? null : null,\n        \"&:hover\": {\n            backgroundColor: state.isFocused ? \"#022244\" : \"#023950\",\n        }\n    }),\n    menu: (base, state) => ({\n        ...base,\n        background: \"#023950\",\n        borderRadius: 0,\n        marginTop: 0,\n    \n    }),\n    menuList: (base, state) => ({\n        ...base,\n        padding: 0,\n    }),\n    singleValue: (provided) => ({\n        ...provided,\n        color: '#eeeeee'\n    }),\n    option: (provided, state) => ({\n        ...provided,\n        color: '#eeeeee',\n        \"&:hover\": {\n            backgroundColor: state.isFocused ? \"#022244\" : \"#023950\",\n        }\n        \n    }),\n};\n\nfunction CodeSelect({options, onChange}) {\n    return <div>\n        <Select styles={customStyles} options={options} onChange={onChange} ></Select>\n    </div>\n}\nexport default CodeSelect;","/Users/chinyi0523/Desktop/CloudComputing_FinalProject/frontend/src/structure.js",[],"/Users/chinyi0523/Desktop/CloudComputing_FinalProject/frontend/src/components/modal.js",[],"/Users/chinyi0523/Desktop/CloudComputing_FinalProject/frontend/src/components/socialButton.js",[],"/Users/chinyi0523/Desktop/CloudComputing_FinalProject/frontend/src/useStructure.js",["72"],"import { useState } from 'react'\n\n\nconst useStructure = (str) => {\n    const [treeStructure, setTree] = useState(str);\n    const [currentFilePath, setCurrentFilePath] = useState([]);\n    const resetStatus = () => {\n        resetIter(treeStructure)\n        setTree(treeStructure)\n    }\n    const resetIter = (ele) => {\n        if (Array.isArray(ele)) return ele.map(resetIter)\n        else if (ele.type === 'file') {\n            ele.status = 'off';\n        }\n        else if (ele.type === 'blankFile' || ele.type === 'blankFolder') {\n            ele.displayAddBlank = false\n        }\n        else if (ele.type === 'folder') {\n            ele.status = 'close'\n            resetIter(ele.data)\n        }\n    }\n    const modifyClickTree = (fp_arr, isFolder) => {\n        let a = treeStructure\n        let filename='/'\n        for (let i = 0; i < fp_arr.length - 1; i++) {\n            a[fp_arr[i]].status = 'open'\n            filename += (`${a[fp_arr[i]].name}/`)\n            if ((i === fp_arr.length - 2) && !isFolder) a[fp_arr[i]].status = 'innestopen'\n            a = a[fp_arr[i]].data\n        }\n        if (isFolder) {\n            a[fp_arr[fp_arr.length - 1]].status = 'innestopenFocus'\n            filename += (`${a[fp_arr[fp_arr.length - 1]].name}/`)\n        }\n        else {\n            a[fp_arr[fp_arr.length - 1]].status = 'on'\n            filename += (`${a[fp_arr[fp_arr.length - 1]].name}`)\n        }\n        \n        setTree([...treeStructure])\n        return(filename)\n    }\n    const loadStructure = (data) => {\n        console.log(\"Function for reading message from backend\")\n    }\n    const onClickFile = (fp) => {\n        let fp_arr = fp.split('_')\n        setCurrentFilePath(fp_arr)\n        const filename = modifyClickTree(fp_arr, false)\n        return filename\n    }\n    const onClickFolder = (fp) => {\n        let fp_arr = fp.split('_')\n        setCurrentFilePath(fp_arr)\n        modifyClickTree(fp_arr, true)\n    }\n    const IterAddNewFile = (ele, isFolder) => {\n        for (let i = 0; i < ele.length; i++) {\n            if (ele[i].type === 'folder' && ele[i].status === 'open') {\n                let find = IterAddNewFile(ele[i].data, isFolder)\n                if (find === 'find') {\n                    return \"find\"\n                }\n                else return undefined\n            }\n            else if (ele[i].type === 'folder' && (ele[i].status === 'innestopen' || ele[i].status === 'innestopenFocus')) {\n                for (let j = 0; j < ele[i].data.length; j++) {\n                    if (isFolder) {\n                        if (ele[i].data[j].type === 'blankFolder') {\n                            ele[i].data[j].displayAddBlank = true\n                            return \"find\"\n                        }\n                    }\n                    else {\n                        if (ele[i].data[j].type === 'blankFile') {\n                            ele[i].data[j].displayAddBlank = true\n                            return \"find\"\n                        }\n                    }\n                }\n            }\n        }\n    }\n    const IterComfirmNewFile = (ele, name, isFolder) => {\n        for (let i = 0; i < ele.length; i++) {\n            if (ele[i].type === 'folder' && ele[i].status === 'open') {\n                const result = IterComfirmNewFile(ele[i].data, name, isFolder)\n                if (result.find === 'find') {\n                    const currentFilePath = `${ele[i].name}/${result.path}`\n                    console.log(currentFilePath)\n                    return {\"find\":\"find\",\"path\":currentFilePath}\n\n                }\n                else return {\"find\":\"unfind\",\"path\":\"\"}\n            }\n            else if (ele[i].type === 'folder' && (ele[i].status === 'innestopen' || ele[i].status === 'innestopenFocus')) {\n                for (let j = 0; j < ele[i].data.length; j++) {\n                    if (isFolder) {\n                        if (ele[i].data[j].type === 'blankFolder') {\n                            ele[i].data[j].displayAddBlank = false\n                            let cnt = 0\n                            for (let k = 0; k < ele[i].data.length; k++) {\n                                if (ele[i].data[k].type === 'blankFile') {\n                                    cnt = k\n                                }\n                            }\n                            ele[i].data.splice(cnt - 1, 0, {\n                                type: \"folder\",\n                                name: name,\n                                status: \"close\",\n                                data: [\n                                    {\n                                        type: \"blankFolder\",\n                                        displayAddBlank: false,\n                                    },\n                                    {\n                                        type: \"blankFile\",\n                                        displayAddBlank: false,\n                                    },\n                                    \"EOF\"\n                                ]\n                            });\n                            return {\"find\":\"find\",\"path\":`${ele[i].name}/${name}/`}\n                        }\n                    }\n                    else {\n                        if (ele[i].data[j].type === 'blankFile') {\n                            const currentFilePath = `${ele[i].name}/${name}` \n                            return {\"find\":\"find\",\"path\":currentFilePath}\n                        }\n                    }\n                }\n            }\n        }\n        let returnName\n        for(let i=0;i<ele.length;i++){\n            if(isFolder){\n                if (ele[i].type === 'blankFolder') {\n                    returnName = name+'/'\n                    ele[i].displayAddBlank = false;\n                    let cnt = 0\n                    for (let k = 0; k < ele.length; k++) {\n                        if (ele[k].type === 'blankFile') {\n                            cnt = k\n                        }\n                    }\n                    ele.splice(cnt, 0, {\n                        type: \"folder\",\n                        name: name,\n                        status: \"close\",\n                        data: [\n                            {\n                                type: \"blankFolder\",\n                                displayAddBlank: false,\n                            },\n                            {\n                                type: \"blankFile\",\n                                displayAddBlank: false,\n                            },\n                            \"EOF\"\n                        ]\n                    });\n                }\n            }\n            else {\n                if (ele[i].type === 'blankFile') {\n                    ele[i].displayAddBlank = false;\n                    returnName = name;\n                }\n            }\n        }\n        return {\"find\":\"find\",\"path\":returnName}\n    }\n    const AddNewFile = (isFolder) => {\n        let findInsertPlace = IterAddNewFile(treeStructure, isFolder)\n        if (findInsertPlace !== 'find') {\n            for (let i = 0; i < treeStructure.length; i++) {\n                if (isFolder) {\n                    if (treeStructure[i].type === 'blankFolder') {\n                        treeStructure[i].displayAddBlank = true;\n                    }\n                }\n                else {\n                    if (treeStructure[i].type === 'blankFile') {\n                        treeStructure[i].displayAddBlank = true;\n                    }\n                }\n            }\n        }\n        setTree([...treeStructure])\n    }\n    const SaveToTree = (name, isFolder) => {\n        let result = IterComfirmNewFile(treeStructure, name, isFolder).path\n        console.log(result)\n        setTree([...treeStructure])\n        result = `/${result}`\n        return result\n    }\n\n\n\n    // const sendCodes = (codes) => {\n    //     sendData(['input', codes])\n    // }\n\n    return {\n        treeStructure, setTree, resetStatus, onClickFile, onClickFolder, AddNewFile, SaveToTree, currentFilePath\n\n    }\n}\n\nexport default useStructure\n","/Users/chinyi0523/Desktop/CloudComputing_FinalProject/frontend/src/functions/transfer.js",[],"/Users/chinyi0523/Desktop/CloudComputing_FinalProject/frontend/src/ProfileNew.js",[],"/Users/chinyi0523/Desktop/CloudComputing_FinalProject/frontend/src/functions/rmduplicate.js",[],{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","replacedBy":"76"},{"ruleId":"77","severity":1,"message":"78","line":15,"column":25,"nodeType":"79","messageId":"80","endLine":15,"endColumn":35},{"ruleId":"77","severity":1,"message":"81","line":8,"column":8,"nodeType":"79","messageId":"80","endLine":8,"endColumn":14},{"ruleId":"77","severity":1,"message":"82","line":45,"column":7,"nodeType":"79","messageId":"80","endLine":45,"endColumn":15},{"ruleId":"83","severity":1,"message":"84","line":68,"column":16,"nodeType":"85","endLine":78,"endColumn":6},{"ruleId":"86","severity":1,"message":"87","line":100,"column":50,"nodeType":"85","messageId":"88","endLine":100,"endColumn":52},{"ruleId":"77","severity":1,"message":"89","line":33,"column":12,"nodeType":"79","messageId":"80","endLine":33,"endColumn":19},{"ruleId":"77","severity":1,"message":"90","line":44,"column":15,"nodeType":"79","messageId":"80","endLine":44,"endColumn":19},{"ruleId":"77","severity":1,"message":"91","line":1,"column":17,"nodeType":"79","messageId":"80","endLine":1,"endColumn":25},{"ruleId":"77","severity":1,"message":"92","line":45,"column":11,"nodeType":"79","messageId":"80","endLine":45,"endColumn":24},"no-native-reassign",["93"],"no-negated-in-lhs",["94"],"no-unused-vars","'AiFillRest' is defined but never used.","Identifier","unusedVar","'Select' is defined but never used.","'initList' is assigned a value but never used.","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","expectedAtEnd","'confirm' is assigned a value but never used.","'data' is assigned a value but never used.","'useState' is defined but never used.","'loadStructure' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]